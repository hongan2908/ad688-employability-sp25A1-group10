---
title: "Exploratory Data Analysis"
subtitle: "Exploratory Data Analysis of Lightcast Job Postings"
author:
  - name: Shreya Mani
    affiliations:
      - id: bu
        name: Boston University
        city: Boston
        state: MA
format: 
  html:
    toc: true
    number-sections: true
    df-print: paged
---
## Setup

First, we load the necessary Python libraries and the dataset.

```{python}
# Import libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from datetime import datetime
import os

# Set plot style
sns.set_style("whitegrid")
plt.rcParams['figure.figsize'] = (10, 6)

# Auto-download CSV if missing
csv_path = 'region_analysis/lightcast_job_postings.csv'
if not os.path.exists(csv_path):
    print(f"{csv_path} not found! Attempting to download...")

    os.makedirs('region_analysis', exist_ok=True)

    try:
        import gdown
    except ImportError:
        !pip install gdown
        import gdown

    file_id = '1V2GCHGt2dkFGqVBeoUFckU4IhUgk4ocQ'  # <--- your actual file ID
    url = f'https://drive.google.com/uc?id={file_id}'
    gdown.download(url, csv_path, quiet=False)
    print("Download complete!")
else:
    print(f"{csv_path} found. Proceeding...")

# Load the dataset
df = pd.read_csv('region_analysis/lightcast_job_postings.csv')

# Display the first few rows
df.head()
# Basic info
print("Dataset Info:")
print(df.info())

# Summary statistics for numerical columns
print("\nSummary Statistics (Numerical):")
print(df.describe())

# Summary statistics for categorical columns
print("\nSummary Statistics (Categorical):")
print(df.describe(include=['object']))

# Check for missing values
print("\nMissing Values:")
missing_values = df.isnull().sum()
print(missing_values[missing_values > 0])
# Convert date columns to datetime
date_columns = ['LAST_UPDATED_DATE', 'POSTED', 'EXPIRED', 'MODELED_EXPIRED']
for col in date_columns:
    df[col] = pd.to_datetime(df[col], errors='coerce')

# Handle missing values (example: fill missing COMPANY_NAME with 'Unknown')
df['COMPANY_NAME'] = df['COMPANY_NAME'].fillna('Unknown')

# Drop columns with excessive missing values (e.g., >80% missing)
threshold = 0.8
df = df.loc[:, df.isnull().mean() < threshold]

# Verify cleaning
print("\nMissing Values After Cleaning:")
print(df.isnull().sum()[df.isnull().sum() > 0])
# Count postings by month
df['POSTED_MONTH'] = df['POSTED'].dt.to_period('M')
posting_trends = df['POSTED_MONTH'].value_counts().sort_index()

# Plot
plt.figure(figsize=(12, 6))
posting_trends.plot(kind='bar')
plt.title('Job Postings by Month')
plt.xlabel('Month')
plt.ylabel('Number of Postings')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
# Plot distribution of DURATION
plt.figure(figsize=(10, 6))
sns.histplot(df['DURATION'].dropna(), bins=30, kde=True)
plt.title('Distribution of Job Posting Duration')
plt.xlabel('Duration (Days)')
plt.ylabel('Frequency')
plt.show()

# Summary statistics for DURATION
print("\nDuration Statistics:")
print(df['DURATION'].describe())
# Top 10 companies by job postings
top_companies = df['COMPANY_NAME'].value_counts().head(10)
plt.figure(figsize=(10, 6))
sns.barplot(x=top_companies.values, y=top_companies.index)
plt.title('Top 10 Companies by Job Postings')
plt.xlabel('Number of Postings')
plt.ylabel('Company Name')
plt.show()

# Top 10 NAICS2 industries
top_naics2 = df['NAICS2_NAME'].value_counts().head(10)
plt.figure(figsize=(10, 6))
sns.barplot(x=top_naics2.values, y=top_naics2.index)
plt.title('Top 10 Industries (NAICS2)')
plt.xlabel('Number of Postings')
plt.ylabel('Industry')
plt.show()
# Education levels distribution
plt.figure(figsize=(10, 6))
sns.countplot(y='EDUCATION_LEVELS_NAME', data=df, order=df['EDUCATION_LEVELS_NAME'].value_counts().head(5).index)
plt.title('Distribution of Education Levels Required')
plt.xlabel('Count')
plt.ylabel('Education Level')
plt.show()

# Minimum years of experience
plt.figure(figsize=(10, 6))
sns.histplot(df['MIN_YEARS_EXPERIENCE'].dropna(), bins=20, kde=True)
plt.title('Distribution of Minimum Years of Experience')
plt.xlabel('Years of Experience')
plt.ylabel('Frequency')
plt.show()
# Remote work distribution
plt.figure(figsize=(10, 6))
sns.countplot(x='REMOTE_TYPE_NAME', data=df)
plt.title('Distribution of Remote Work Types')
plt.xlabel('Remote Type')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

# Employment type distribution
plt.figure(figsize=(10, 6))
sns.countplot(x='EMPLOYMENT_TYPE_NAME', data=df)
plt.title('Distribution of Employment Types')
plt.xlabel('Employment Type')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()
# Function to parse skills lists (assuming skills are stored as strings of lists)
def parse_skills(skill_column):
    skills_list = []
    for skills in df[skill_column].dropna():
        # Remove square brackets and split by commas
        skills = skills.strip('[]').replace('\n', '').split(',')
        skills = [skill.strip().strip('"') for skill in skills if skill.strip()]
        skills_list.extend(skills)
    return pd.Series(skills_list)

# Top 10 specialized skills
specialized_skills = parse_skills('SPECIALIZED_SKILLS_NAME')
top_specialized_skills = specialized_skills.value_counts().head(10)
plt.figure(figsize=(10, 6))
sns.barplot(x=top_specialized_skills.values, y=top_specialized_skills.index)
plt.title('Top 10 Specialized Skills')
plt.xlabel('Count')
plt.ylabel('Skill')
plt.show()

# Top 10 software skills
software_skills = parse_skills('SOFTWARE_SKILLS_NAME')
top_software_skills = software_skills.value_counts().head(10)
plt.figure(figsize=(10, 6))
sns.barplot(x=top_software_skills.values, y=top_software_skills.index)
plt.title('Top 10 Software Skills')
plt.xlabel('Count')
plt.ylabel('Skill')
plt.show()
# Top 10 states by job postings
top_states = df['STATE_NAME'].value_counts().head(10)
plt.figure(figsize=(10, 6))
sns.barplot(x=top_states.values, y=top_states.index)
plt.title('Top 10 States by Job Postings')
plt.xlabel('Number of Postings')
plt.ylabel('State')
plt.show()

# Top 10 cities by job postings
top_cities = df['CITY_NAME'].value_counts().head(10)
plt.figure(figsize=(10, 6))
sns.barplot(x=top_cities.values, y=top_cities.index)
plt.title('Top 10 Cities by Job Postings')
plt.xlabel('Number of Postings')
plt.ylabel('City')
plt.show()

```
