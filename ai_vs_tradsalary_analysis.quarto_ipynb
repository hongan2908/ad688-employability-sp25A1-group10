{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Urban vs Rural States\n",
        "jupyter: python3\n",
        "---"
      ],
      "id": "b597715d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load cleaned dataset (update path)\n",
        "df = pd.read_csv('region_analysis/lightcast_job_postings.csv')\n",
        "\n",
        "# Convert SALARY to numeric and drop nulls\n",
        "df['SALARY'] = pd.to_numeric(df['SALARY'], errors='coerce')\n",
        "df = df.dropna(subset=['SALARY'])\n",
        "\n",
        "# Tag AI vs Non-AI jobs\n",
        "def tag_ai(row):\n",
        "    title = str(row['TITLE_NAME']).lower()\n",
        "    industry = str(row['NAICS_2022_2_NAME']).lower()\n",
        "    \n",
        "    if ('ai' in title or 'artificial intelligence' in title or 'machine learning' in title or\n",
        "        'data scientist' in title or 'deep learning' in title or 'nlp' in title or 'ml' in title or\n",
        "        'data engineer' in title or 'ml engineer' in title or 'scientist' in title or\n",
        "        'computer vision' in title or 'robotics' in title or\n",
        "        'professional, scientific, and technical services' in industry or 'information' in industry):\n",
        "        return 'AI Career'\n",
        "    else:\n",
        "        return 'Non-AI Career'\n",
        "\n",
        "df['Career_Type'] = df.apply(tag_ai, axis=1)\n",
        "print(df['Career_Type'].value_counts())\n",
        "\n",
        "# Group by STATE and Career Type → Avg Salary\n",
        "state_salary = df.groupby(['STATE_NAME', 'Career_Type'])['SALARY'].mean().round(2).reset_index()\n",
        "state_salary = state_salary.sort_values(by='SALARY', ascending=False)\n",
        "\n",
        "# Show top 5 for each category\n",
        "print(\"Top 5 States for AI Careers:\")\n",
        "print(state_salary[state_salary['Career_Type'] == 'AI Career'].head(5))\n",
        "\n",
        "print(\"\\nTop 5 States for Non-AI Careers:\")\n",
        "print(state_salary[state_salary['Career_Type'] == 'Non-AI Career'].head(5))\n",
        "\n",
        "# Optional: save to CSV\n",
        "# state_salary.to_csv('statewise_ai_vs_nonai_salary.csv', index=False)"
      ],
      "id": "73217fba",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Top 5 AI states\n",
        "top_ai = state_salary[state_salary['Career_Type'] == 'AI Career'].head(5)\n",
        "\n",
        "# Top 5 Non-AI states\n",
        "top_nonai = state_salary[state_salary['Career_Type'] == 'Non-AI Career'].head(5)\n",
        "\n",
        "# Plot AI Career Salaries\n",
        "plt.figure(figsize=(8, 5))\n",
        "plt.barh(top_ai['STATE_NAME'], top_ai['SALARY'])\n",
        "plt.xlabel(\"Average Salary ($)\")\n",
        "plt.title(\"Top 5 States for AI Careers\")\n",
        "plt.gca().invert_yaxis()\n",
        "plt.tight_layout()\n",
        "plt.savefig(\"top_ai_states.png\")\n",
        "plt.show()\n",
        "\n",
        "# Plot Non-AI Career Salaries\n",
        "plt.figure(figsize=(8, 5))\n",
        "plt.barh(top_nonai['STATE_NAME'], top_nonai['SALARY'], color='orange')\n",
        "plt.xlabel(\"Average Salary ($)\")\n",
        "plt.title(\"Top 5 States for Non-AI Careers\")\n",
        "plt.gca().invert_yaxis()\n",
        "plt.tight_layout()\n",
        "plt.savefig(\"top_nonai_states.png\")\n",
        "plt.show()"
      ],
      "id": "a7acc0f7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Count of jobs used to compute avg salary\n",
        "state_counts = df.groupby(['STATE_NAME', 'Career_Type'])['SALARY'].agg(['mean', 'count']).round(2).reset_index()\n",
        "state_counts = state_counts.sort_values(by='mean', ascending=False)\n",
        "\n",
        "# Show top 10 AI states by average salary + count\n",
        "print(state_counts[state_counts['Career_Type'] == 'AI Career'].head(10))"
      ],
      "id": "0e76c127",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "all_ai_states = state_counts[state_counts['Career_Type'] == 'AI Career']\n",
        "print(all_ai_states['STATE_NAME'].unique())"
      ],
      "id": "3f0aa72a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "reliable_ai_states = state_counts[\n",
        "    (state_counts['Career_Type'] == 'AI Career') &\n",
        "    (state_counts['count'] >= 50)\n",
        "].sort_values(by='mean', ascending=False)\n",
        "\n",
        "print(reliable_ai_states.head(10))"
      ],
      "id": "b4e903ad",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "big_states = ['Massachusetts', 'New York', 'New Jersey', 'California', 'Texas']\n",
        "\n",
        "ai_counts_big_states = df[\n",
        "    (df['Career_Type'] == 'AI Career') & \n",
        "    (df['STATE_NAME'].isin(big_states))\n",
        "].groupby('STATE_NAME')['SALARY'].agg(['count', 'mean']).round(2).sort_values(by='count', ascending=False)\n",
        "\n",
        "ai_counts_big_states.rename(columns={'count': 'AI Job Postings', 'mean': 'Avg Salary ($)'}, inplace=True)\n",
        "\n",
        "print(ai_counts_big_states)"
      ],
      "id": "67e13a9d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "ai_median_salary = df[df['Career_Type'] == 'AI Career'].groupby('STATE_NAME')['SALARY'].median().round(2).reset_index()\n",
        "ai_counts = df[df['Career_Type'] == 'AI Career'].groupby('STATE_NAME')['SALARY'].count().reset_index(name='Job_Count')\n",
        "\n",
        "# Merge them\n",
        "ai_summary = pd.merge(ai_median_salary, ai_counts, on='STATE_NAME')\n",
        "ai_summary.columns = ['State', 'Median Salary ($)', 'AI Job Count']\n",
        "\n",
        "# Optional: Filter for states with decent sample size\n",
        "ai_summary = ai_summary[ai_summary['AI Job Count'] >= 50]\n",
        "\n",
        "# Sort by Median Salary\n",
        "ai_summary = ai_summary.sort_values(by='Median Salary ($)', ascending=False)\n",
        "\n",
        "print(ai_summary.head(10))"
      ],
      "id": "8ec672f2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "top_states = ai_summary.head(10)\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.barh(top_states['State'], top_states['Median Salary ($)'], color='teal')\n",
        "plt.xlabel(\"Median Salary ($)\")\n",
        "plt.title(\"Top 10 States for AI Careers (Median Salary, ≥50 Jobs)\")\n",
        "plt.gca().invert_yaxis()\n",
        "plt.tight_layout()\n",
        "plt.savefig(\"top_ai_states_median.png\")\n",
        "plt.show()"
      ],
      "id": "7176d73a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "urban_states = ['California', 'New York', 'Massachusetts']\n",
        "rural_states = ['Arkansas', 'Montana', 'Nebraska']\n",
        "\n",
        "urban_vs_rural = geo_stats[\n",
        "    (geo_stats['Career_Type'] == 'AI Career') &\n",
        "    (geo_stats['STATE_NAME'].isin(urban_states + rural_states))\n",
        "].sort_values(by='Median_Salary', ascending=False)\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(urban_vs_rural['STATE_NAME'], urban_vs_rural['Median_Salary'], color='darkorange')\n",
        "plt.xlabel(\"State\")\n",
        "plt.ylabel(\"Median Salary ($)\")\n",
        "plt.title(\"Median AI Salary: Urban vs Rural States\")\n",
        "plt.tight_layout()\n",
        "plt.savefig(\"urban_vs_rural_ai_salaries.png\")\n",
        "plt.show()"
      ],
      "id": "1eb576d5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Heatmap\n",
        "import seaborn as sns \n",
        "pivot = df.groupby(['STATE_NAME', 'Career_Type'])['SALARY'].median().unstack()\n",
        "plt.figure(figsize=(14, 6))\n",
        "sns.heatmap(pivot, annot=True, fmt=\".0f\", cmap=\"coolwarm\", linewidths=0.5)\n",
        "plt.title(\"Median Salary by State and Career Type\")\n",
        "plt.xlabel(\"Career Type\")\n",
        "plt.ylabel(\"State\")\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "852c46ec",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Group by state\n",
        "ai_summary = df[df['Career_Type'] == 'AI Career'].groupby('STATE_NAME')['SALARY'].agg(\n",
        "    Median_Salary='median', Job_Count='count', Std_Dev='std').reset_index()\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.scatter(ai_summary['Median_Salary'], ai_summary['Job_Count'],\n",
        "            s=ai_summary['Job_Count'] / 1.5,\n",
        "            c=ai_summary['Std_Dev'], cmap='viridis', alpha=0.7, edgecolors='black')\n",
        "# Add state name labels to the bubbles\n",
        "for i, row in ai_summary.iterrows():\n",
        "    if row['Job_Count'] > 300:  # Label only big bubbles to reduce clutter\n",
        "        plt.text(row['Median_Salary'], row['Job_Count'], row['STATE_NAME'],\n",
        "                 fontsize=8, ha='center', va='center', color='black')\n",
        "\n",
        "plt.colorbar(label='Salary Std Dev')\n",
        "plt.xlabel('Median Salary ($)')\n",
        "plt.ylabel('AI Job Count')\n",
        "plt.title('AI Career Opportunities: Salary vs Availability by State')\n",
        "plt.grid(True, linestyle='--', alpha=0.5)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "f664350a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Reference lines\n",
        "median_salary_cutoff = ai_summary['Median_Salary'].median()\n",
        "median_job_count_cutoff = ai_summary['Job_Count'].median()\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.scatter(ai_summary['Median_Salary'], ai_summary['Job_Count'],\n",
        "            s=ai_summary['Job_Count'] / 1.5,\n",
        "            c=ai_summary['Std_Dev'], cmap='viridis', alpha=0.7, edgecolors='black')\n",
        "\n",
        "# Add quadrant lines\n",
        "plt.axvline(median_salary_cutoff, color='gray', linestyle='--', linewidth=1)\n",
        "plt.axhline(median_job_count_cutoff, color='gray', linestyle='--', linewidth=1)\n",
        "\n",
        "# Label top states\n",
        "for i, row in ai_summary.iterrows():\n",
        "    if row['Job_Count'] > 300:\n",
        "        plt.text(row['Median_Salary'], row['Job_Count'], row['STATE_NAME'],\n",
        "                 fontsize=8, ha='center', va='center', color='black')\n",
        "\n",
        "plt.colorbar(label='Salary Std Dev')\n",
        "plt.xlabel('Median Salary ($)')\n",
        "plt.ylabel('AI Job Count')\n",
        "plt.title('AI Career Opportunities: Salary vs Availability (with Reference Lines)')\n",
        "plt.grid(True, linestyle='--', alpha=0.5)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "df081b2d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### AI Salaries by State Heatmap\n"
      ],
      "id": "d81a1a1a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.express as px\n",
        "\n",
        "# Mapping of full state names to 2-letter codes\n",
        "state_abbrev = {\n",
        "    'Alabama': 'AL', 'Alaska': 'AK', 'Arizona': 'AZ', 'Arkansas': 'AR', 'California': 'CA',\n",
        "    'Colorado': 'CO', 'Connecticut': 'CT', 'Delaware': 'DE', 'Florida': 'FL', 'Georgia': 'GA',\n",
        "    'Hawaii': 'HI', 'Idaho': 'ID', 'Illinois': 'IL', 'Indiana': 'IN', 'Iowa': 'IA',\n",
        "    'Kansas': 'KS', 'Kentucky': 'KY', 'Louisiana': 'LA', 'Maine': 'ME', 'Maryland': 'MD',\n",
        "    'Massachusetts': 'MA', 'Michigan': 'MI', 'Minnesota': 'MN', 'Mississippi': 'MS',\n",
        "    'Missouri': 'MO', 'Montana': 'MT', 'Nebraska': 'NE', 'Nevada': 'NV', 'New Hampshire': 'NH',\n",
        "    'New Jersey': 'NJ', 'New Mexico': 'NM', 'New York': 'NY', 'North Carolina': 'NC',\n",
        "    'North Dakota': 'ND', 'Ohio': 'OH', 'Oklahoma': 'OK', 'Oregon': 'OR', 'Pennsylvania': 'PA',\n",
        "    'Rhode Island': 'RI', 'South Carolina': 'SC', 'South Dakota': 'SD', 'Tennessee': 'TN',\n",
        "    'Texas': 'TX', 'Utah': 'UT', 'Vermont': 'VT', 'Virginia': 'VA', 'Washington': 'WA',\n",
        "    'West Virginia': 'WV', 'Wisconsin': 'WI', 'Wyoming': 'WY', 'District of Columbia': 'DC'\n",
        "}\n",
        "\n",
        "# Create dataframe with state abbreviations\n",
        "ai_state_medians = df[df['Career_Type'] == 'AI Career'].groupby('STATE_NAME')['SALARY'].median().reset_index()\n",
        "ai_state_medians['STATE_ABBR'] = ai_state_medians['STATE_NAME'].map(state_abbrev)\n",
        "\n",
        "# Now plot\n",
        "fig = px.choropleth(ai_state_medians,\n",
        "                    locations='STATE_ABBR',\n",
        "                    locationmode=\"USA-states\",\n",
        "                    color='SALARY',\n",
        "                    scope=\"usa\",\n",
        "                    color_continuous_scale=\"Viridis\",\n",
        "                    labels={'SALARY':'Median AI Salary'})\n",
        "fig.update_layout(title_text='Median AI Salary by State', geo=dict(showlakes=True))\n",
        "fig.show()"
      ],
      "id": "f98c60ad",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.graph_objects as go\n",
        "\n",
        "# Prepare the base choropleth layer\n",
        "fig = go.Figure(data=go.Choropleth(\n",
        "    locations=ai_state_medians['STATE_ABBR'],  # 2-letter codes\n",
        "    z=ai_state_medians['SALARY'],\n",
        "    locationmode='USA-states',\n",
        "    colorscale='Viridis',\n",
        "    colorbar_title='Median AI Salary',\n",
        "    text=ai_state_medians['STATE_NAME'],  # hover text\n",
        "    hoverinfo='text+z'\n",
        "))\n",
        "\n",
        "# Add text annotations: state abbreviations\n",
        "for i, row in ai_state_medians.iterrows():\n",
        "    fig.add_trace(go.Scattergeo(\n",
        "        locationmode='USA-states',\n",
        "        lon=[None],  # plotly doesn’t support precise state centroids natively\n",
        "        lat=[None],\n",
        "        text=row['STATE_ABBR'],\n",
        "        mode='text',\n",
        "        textfont=dict(color='white', size=10),\n",
        "        name=row['STATE_ABBR'],\n",
        "        showlegend=False\n",
        "    ))\n",
        "\n",
        "# Update map layout\n",
        "fig.update_layout(\n",
        "    title_text='Median AI Salary by State (with State Labels)',\n",
        "    geo=dict(\n",
        "        scope='usa',\n",
        "        showlakes=True,\n",
        "        lakecolor='rgb(255, 255, 255)'\n",
        "    )\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "6615e0a6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Non AI Careers\n"
      ],
      "id": "e88cdea8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "nonai_state_medians = df[df['Career_Type'] == 'Non-AI Career'].groupby('STATE_NAME')['SALARY'].median().reset_index()\n",
        "nonai_state_medians['STATE_ABBR'] = nonai_state_medians['STATE_NAME'].map(state_abbrev)"
      ],
      "id": "240cff54",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "ai_top = ai_state_medians[['STATE_NAME', 'SALARY']].rename(columns={'SALARY': 'AI_Median'})\n",
        "nonai_top = nonai_state_medians[['STATE_NAME', 'SALARY']].rename(columns={'SALARY': 'NonAI_Median'})\n",
        "\n",
        "comparison = pd.merge(ai_top, nonai_top, on='STATE_NAME', how='inner')\n",
        "comparison['Diff'] = comparison['AI_Median'] - comparison['NonAI_Median']\n",
        "comparison.sort_values(by='Diff', ascending=False).head(10)"
      ],
      "id": "a1418f20",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Step 1: Get AI job counts per state\n",
        "ai_counts = df[df['Career_Type'] == 'AI Career'].groupby('STATE_NAME')['SALARY'].count().reset_index(name='AI_Job_Count')\n",
        "\n",
        "# Step 2: Merge counts into comparison\n",
        "comparison_with_counts = pd.merge(comparison, ai_counts, on='STATE_NAME', how='left')\n",
        "\n",
        "# Step 3: Filter for states with at least 100 AI jobs\n",
        "filtered = comparison_with_counts[comparison_with_counts['AI_Job_Count'] >= 300]\n",
        "\n",
        "# Step 4: Take top 10 states by salary gap\n",
        "top_realistic = filtered.sort_values(by='Diff', ascending=False).head(10).sort_values('AI_Median')\n",
        "\n",
        "# Step 5: Plot dumbbell chart\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Draw connecting lines\n",
        "for _, row in top_realistic.iterrows():\n",
        "    plt.plot([row['NonAI_Median'], row['AI_Median']], [row['STATE_NAME']] * 2, color='gray', linewidth=2)\n",
        "\n",
        "# Plot salary points\n",
        "plt.scatter(top_realistic['NonAI_Median'], top_realistic['STATE_NAME'], color='darkorange', label='Traditional Median Salary', s=80)\n",
        "plt.scatter(top_realistic['AI_Median'], top_realistic['STATE_NAME'], color='steelblue', label='AI Median Salary', s=80)\n",
        "\n",
        "# Annotate the difference\n",
        "for _, row in top_realistic.iterrows():\n",
        "    plt.text(row['AI_Median'] + 1000, row['STATE_NAME'], f\"+${int(row['Diff']):,}\", fontsize=8, va='center', color='black')\n",
        "\n",
        "plt.xlabel(\"Median Salary ($)\")\n",
        "plt.title(\"AI vs Traditional Salaries (Top 10 States, ≥300 AI Jobs)\")\n",
        "plt.legend()\n",
        "plt.grid(axis='x', linestyle='--', alpha=0.5)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "62eb0d1b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Insight: Top States with Highest AI Salary Advantage (≥300 AI Jobs)\n",
        "\n",
        "This chart compares the median salaries of AI-related and traditional careers in states with substantial AI job markets (300+ postings). Each line connects the traditional (orange) and AI (blue) median salaries for a given state, with the annotated value indicating the salary gap.\n",
        "\n",
        "Key takeaways:\n",
        "- **Michigan, California, and Florida** exhibit the most substantial salary premiums for AI roles, with gaps exceeding **$30,000–$50,000**.\n",
        "- **New Jersey, Georgia, and Illinois** also show consistent advantages, reinforcing the value of AI specialization in large-scale markets.\n",
        "- By filtering for states with significant job volume, we ensure these salary gaps are **statistically meaningful**, not outliers from niche postings.\n",
        "\n",
        "This visualization reinforces that **AI careers aren't just higher paying — they're transformationally more lucrative** in regions where demand and infrastructure support sustainable opportunities.\n"
      ],
      "id": "a3e17ccf"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\honga\\ad688-project1-group-10\\.venv\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}